[{"C:\\Users\\William\\quiz\\src\\App.js":"1","C:\\Users\\William\\quiz\\src\\index.js":"2"},{"size":2222,"mtime":1606389279139,"results":"3","hashOfConfig":"4"},{"size":219,"mtime":1606389281034,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"f3lfuy",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\William\\quiz\\src\\App.js",["11"],"import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [timerDays, setTimerDays] = useState('00');\n  const [timerHours, setTimerHours] = useState('00');\n  const [timerMinutes, setTimerMinutes] = useState('00');\n  const [timerSeconds, setTimerSeconds] = useState('00');\n\n  let interval = useRef();\n\n  const startTimer = () => {\n    const countdownDate = new Date('May 30, 2021 00:00:00').getTime();\n\n    interval = setInterval(() => {\n      const now = new Date().getTime();\n      const distance = countdownDate - now;\n\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)));\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      if (distance < 0) {\n        //stop our timer\n        clearInterval(interval.current);\n      } else {\n        //update timer\n        setTimerDays(days);\n        setTimerHours(hours);\n        setTimerMinutes(minutes);\n        setTimerSeconds(seconds);\n      }\n\n    }, 1000);\n  };\n\n  //componentDidMount\n  useEffect(() => {\n    startTimer();\n    return () => {\n      clearInterval(interval.current);\n    }\n  });\n\n  return (\n    <section className=\"timer-container\">\n      <section className=\"timer\">\n        <div>\n          <span className=\"mdi mdi-calendar-clock timer-icon\"></span>\n          <h2>Countdown Timer</h2>\n          <p>Countdown to a really special date. One you could or would never imagine!</p>\n        </div>\n        <div>\n          <section>\n            <p>{timerDays}</p>\n            <p><small>Days</small></p>\n          </section>\n          <span>:</span>\n          <section>\n            <p>{timerHours}</p>\n            <p><small>Hours</small></p>\n          </section>\n          <span>:</span>\n          <section>\n            <p>{timerMinutes}</p>\n            <p><small>Minutes</small></p>\n          </section>\n          <span>:</span>\n          <section>\n            <p>{timerSeconds}</p>\n            <p><small>Seconds</small></p>\n          </section>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default App;","C:\\Users\\William\\quiz\\src\\index.js",[],{"ruleId":"12","severity":1,"message":"13","line":42,"column":30,"nodeType":"14","endLine":42,"endColumn":37},"react-hooks/exhaustive-deps","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier"]